version: '3.8'

services:

  amlight:
    container_name: amlight
    image: amlight
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.2
    ports:
      - 6653:6653
      - 8181:8181
    volumes:
      - ./tests:/tests
      - ./scripts:/scripts
      - ./etc/kytos:/etc/kytos
    environment:
      MONGO_USERNAME: amlight_user
      MONGO_PASSWORD: amlight_pwd
      MONGO_DBNAME: amlight
      MONGO_HOST_SEEDS: "mongo1t:27027,mongo2t:27028,mongo3t:27029"
    depends_on:
      - mongo-ready
    entrypoint: ["/scripts/amlight_kytos.sh"]

  sax:
    container_name: sax
    image: sax
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.3
    ports:
      - 6654:6653
      - 8282:8181
    volumes:
      - ./tests:/tests
      - ./scripts:/scripts
      - ./etc/kytos:/etc/kytos
    environment:
      MONGO_USERNAME: sax_user
      MONGO_PASSWORD: sax_pwd
      MONGO_DBNAME: sax
      MONGO_HOST_SEEDS: "mongo1t:27027,mongo2t:27028,mongo3t:27029"
    depends_on:
      - mongo-ready
    entrypoint: ["/scripts/sax_kytos.sh"]

  tenet:
    container_name: tenet
    image: tenet
    privileged: true
    restart: always
    tty: true
    networks:
      kytos_network:
        ipv4_address: 192.168.0.4
    ports:
      - 6655:6653
      - 8383:8181
    volumes:
      - ./tests:/tests
      - ./scripts:/scripts
      - ./etc/kytos:/etc/kytos
    environment:
      MONGO_USERNAME: tenet_user
      MONGO_PASSWORD: tenet_pwd
      MONGO_DBNAME: tenet
      MONGO_HOST_SEEDS: "mongo1t:27027,mongo2t:27028,mongo3t:27029"
    depends_on:
      - mongo-ready
    entrypoint: ["/scripts/tenet_kytos.sh"]

  mongo-ready:
    container_name: mongo-test-ready
    image: sdx_mongo
    restart: on-failure
    networks:
      kytos_network:
        ipv4_address: 192.168.0.10
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/rs-add.sh"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin_user
      MONGO_INITDB_ROOT_PASSWORD: admin_pw
      MONGO_USERNAME: admin_user
      MONGO_PASSWORD: admin_pw
      MONGO_DBNAME: admin
    depends_on:
      - mongo-setup

  mongo-setup:
    container_name: mongo-rs-init
    image: sdx_mongo
    restart: on-failure
    networks:
      kytos_network:
        ipv4_address: 192.168.0.5
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/rs-init.sh"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin_user
      MONGO_INITDB_ROOT_PASSWORD: admin_pw
      MONGO_USERNAME: admin_user
      MONGO_PASSWORD: admin_pw
      MONGO_DBNAME: admin
    depends_on:
      - mongo1t
      - mongo2t
      - mongo3t
      - mongolc

  mongo1t:
    container_name: mongo1t
    image: sdx_mongo
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.6
    ports:
      - 27027:27027
    volumes:
      - ./os_base/mongo_base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27027" ]

  mongo2t:
    container_name: mongo2t
    image: sdx_mongo
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.7
    ports:
      - 27028:27028
    volumes:
      - ./os_base/mongo_base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27028" ]

  mongo3t:
    container_name: mongo3t
    image: sdx_mongo
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.8
    ports:
      - 27029:27029
    volumes:
      - ./os_base/mongo_base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27029" ]

  mongolc:
    container_name: mongolc
    image: sdx_mongo
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.9
    ports:
      - 27030:27030
    volumes:
      - ./os_base/mongo_base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--port", "27030" ]

  mininet:
    container_name: mininet
    image: mininet
    privileged: true
    tty: true
    networks:
      kytos_network:
        ipv4_address: 192.168.0.11
    volumes:
      - /lib/modules:/lib/modules
    depends_on:
      - amlight
      - sax
      - tenet

  rabbitmq3:
    container_name: "rabbitmq"
    image: sdx_rabbit
    networks:
      kytos_network:
        ipv4_address: 192.168.0.12
    ports:
      # AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=mq_user
      - RABBITMQ_DEFAULT_PASS=mq_pwd

  sdx-lc:
    container_name: sdx-lc
    image: sdx-lc
    tty: true
    networks:
      kytos_network:
        ipv4_address: 192.168.0.14
    ports:
      - 8080:8080
    environment:
      - MONGODB_CONNSTRING=mongodb://sdx_user:sdx_pwd@192.168.0.9:27030/
      - SDX_MQ_IP=192.168.0.12
      - SDXLC_DOMAIN=amlight
      # change to local controller host name
      - SDXLC_HOST=192.168.0.14
      - SDXLC_PORT=8080
      - SDXLC_VERSION=1.0.0
      - PUB_TOPIC=topo
      - PUB_QUEUE=sdx_q1
      - SUB_QUEUE=connection
      - SUB_EXCHANGE=connection
      # change to local controller config (lcX_q1)
      - SUB_TOPIC=lc1_q1
      - MQ_NAME=hello
      - MQ_HOST=192.168.0.12
      - MQ_PORT=5672
      - DB_NAME=sdx_lc
      - DB_CONFIG_TABLE_NAME=sdx_topology
      - KYTOS_URL=http://192.168.0.2:8181/SDX-LC/1.0.0/provision
    depends_on:
      - mongolc
      - rabbitmq3

networks:
  kytos_network:
    ipam:
      driver: default
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.1
