From 87c8d837b38d3ee64fd2cee3f6745eba59111cd6 Mon Sep 17 00:00:00 2001
From: Antonio Francisco <ajoaoff@gmail.com>
Date: Wed, 30 Jun 2021 10:11:11 -0300
Subject: [PATCH 1/3] Method to create or update an interface.

New method on switch to create or update an interface.
The whole method executes with a lock acquired, avoiding
racing condition.
Fixes kytos-ng/kytos#117
---
 kytos/core/switch.py                | 23 ++++++++++++++++++++++
 tests/unit/test_core/test_switch.py | 30 +++++++++++++++++++++++++++++
 2 files changed, 53 insertions(+)

diff --git a/kytos/core/switch.py b/kytos/core/switch.py
index 7195b7221..db9df2ec7 100644
--- a/kytos/core/switch.py
+++ b/kytos/core/switch.py
@@ -1,6 +1,8 @@
 """Module with main classes related to Switches."""
 import json
+from kytos.core.interface import Interface
 import logging
+from threading import Lock
 
 from kytos.core.common import GenericEntity
 from kytos.core.constants import CONNECTION_TIMEOUT, FLOOD_TIMEOUT
@@ -78,6 +80,7 @@ def __init__(self, dpid, connection=None, features=None):
         self.interfaces = {}
         self.flows = []
         self.description = {}
+        self._interface_lock = Lock()
 
         if connection:
             connection.switch = self
@@ -144,6 +147,26 @@ def get_interface_by_port_no(self, port_no):
 
         return self.interfaces.get(port_no)
 
+
+    def update_or_create_interface(self, port_no, name=None, address=None,
+                                   state=None, features=None):
+        """Get and upated an interface or create one if it does not exist."""
+        with self._interface_lock:
+            interface = self.get_interface_by_port_no(port_no)      
+            if interface:
+                interface.name = name or interface.name
+                interface.address = address or interface.address
+                interface.state = state or interface.state
+                interface.features = features or interface.features
+            else:
+                interface = Interface(name=name,
+                                      address=address,
+                                      port_number=port_no,
+                                      switch=self,
+                                      state=state,
+                                      features=features)
+                self.update_interface(interface)
+
     def get_flow_by_id(self, flow_id):
         """Return a Flow using the flow_id given. None if not found in flows.
 
diff --git a/tests/unit/test_core/test_switch.py b/tests/unit/test_core/test_switch.py
index 9ef734605..0b189695b 100644
--- a/tests/unit/test_core/test_switch.py
+++ b/tests/unit/test_core/test_switch.py
@@ -6,6 +6,7 @@
 from unittest.mock import MagicMock, Mock, patch
 
 from kytos.core import Controller
+from kytos.core import interface
 from kytos.core.config import KytosConfig
 from kytos.core.constants import FLOOD_TIMEOUT
 from kytos.core.interface import Interface
@@ -145,6 +146,35 @@ def test_get_interface_by_port_no(self):
         self.assertEqual(expected_interface_1, interface_1)
         self.assertIsNone(expected_interface_2)
 
+    def test_update_or_create_interface_case1(self):
+        """Test update_or_create_interface method."""
+        interface_1 = Interface(name='interface_2', port_number=2,
+                                switch=self.switch)
+        self.switch.interfaces = {2:interface_1}
+
+        self.switch.update_or_create_interface(2, name='new_interface_2')
+        self.assertEqual(self.switch.interfaces[2].name, 'new_interface_2')
+
+    def test_update_or_create_interface_case2(self):
+        """Test update_or_create_interface method."""
+        interface_1 = Interface(name='interface_2', port_number=2,
+                                switch=self.switch)
+        self.switch.interfaces = {2:interface_1}
+
+        self.switch.update_or_create_interface(3, name='new_interface_3')
+        self.assertEqual(self.switch.interfaces[2].name, 'interface_2')
+        self.assertEqual(self.switch.interfaces[3].name, 'new_interface_3')
+
+    def test_update_or_create_interface_case3(self):
+        """Test update_or_create_interface method."""
+        interface_1 = Interface(name='interface_2', port_number=2,
+                                switch=self.switch)
+        self.switch.interfaces = {2:interface_1}
+
+        self.switch.update_or_create_interface(3, name='new_interface_3')
+        self.assertEqual(self.switch.interfaces[2].name, 'interface_2')
+        self.assertEqual(self.switch.interfaces[3].name, 'new_interface_3')
+        
     def test_get_flow_by_id(self):
         """Test get_flow_by_id method."""
         flow_1 = MagicMock(id='1')

From 015785bc15a43d485ee7b74c6fb2bbc51084b634 Mon Sep 17 00:00:00 2001
From: Antonio Francisco <ajoaoff@gmail.com>
Date: Wed, 30 Jun 2021 20:04:34 -0300
Subject: [PATCH 2/3] Insert new fields for OF 1.3.

This fields were added in calls to create interface
---
 kytos/core/switch.py | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/kytos/core/switch.py b/kytos/core/switch.py
index db9df2ec7..88e0d59df 100644
--- a/kytos/core/switch.py
+++ b/kytos/core/switch.py
@@ -149,7 +149,8 @@ def get_interface_by_port_no(self, port_no):
 
 
     def update_or_create_interface(self, port_no, name=None, address=None,
-                                   state=None, features=None):
+                                   state=None, features=None, speed=None,
+                                   config=None):
         """Get and upated an interface or create one if it does not exist."""
         with self._interface_lock:
             interface = self.get_interface_by_port_no(port_no)      
@@ -158,13 +159,18 @@ def update_or_create_interface(self, port_no, name=None, address=None,
                 interface.address = address or interface.address
                 interface.state = state or interface.state
                 interface.features = features or interface.features
+                interface.config = config
+                if speed:
+                    interface.set_custom_speed(speed)
             else:
                 interface = Interface(name=name,
                                       address=address,
                                       port_number=port_no,
                                       switch=self,
                                       state=state,
-                                      features=features)
+                                      features=features,
+                                      speed=speed,
+                                      config=config)
                 self.update_interface(interface)
 
     def get_flow_by_id(self, flow_id):

From 4f913c676dec987248f1c0ba84100186b62bbfb5 Mon Sep 17 00:00:00 2001
From: Antonio Francisco <ajoaoff@gmail.com>
Date: Thu, 1 Jul 2021 14:26:25 -0300
Subject: [PATCH 3/3] Return the interface in update or create

Some users of this method may need to reference
the created/updated interface.
---
 kytos/core/switch.py | 1 +
 1 file changed, 1 insertion(+)

diff --git a/kytos/core/switch.py b/kytos/core/switch.py
index 88e0d59df..c9d31cbeb 100644
--- a/kytos/core/switch.py
+++ b/kytos/core/switch.py
@@ -172,6 +172,7 @@ def update_or_create_interface(self, port_no, name=None, address=None,
                                       speed=speed,
                                       config=config)
                 self.update_interface(interface)
+            return interface
 
     def get_flow_by_id(self, flow_id):
         """Return a Flow using the flow_id given. None if not found in flows.
