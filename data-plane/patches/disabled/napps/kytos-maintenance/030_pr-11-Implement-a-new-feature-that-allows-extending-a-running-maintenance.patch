From 6da7647ab296a212f724a03f9e29d155b0839f0d Mon Sep 17 00:00:00 2001
From: Antonio Francisco <ajoaoff@gmail.com>
Date: Thu, 10 Jun 2021 15:17:04 -0300
Subject: [PATCH 1/3] Fix openapi.yml

---
 openapi.yml | 77 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 77 insertions(+)

diff --git a/openapi.yml b/openapi.yml
index faa05ef..7db802a 100644
--- a/openapi.yml
+++ b/openapi.yml
@@ -155,6 +155,46 @@ paths:
           description: Invalid data.
         '404':
           description: Maintenance window not found.
+        '415':
+          description: No JSON in request.
+  '/maintenance/{mw_id}/extend':
+    patch:
+      tags:
+        - Update
+      summary: Extend the duration of a running maintenance
+      parameters:
+        - name: mw_id
+          in: path
+          required: true
+          schema:
+            type: string
+          description: Maintenance window ID
+      requestBody:
+        description: Minutes to extend the maintenance
+        required: true
+        content:
+          application/json:
+            schema:
+              type: object
+              properties:
+                minutes:
+                  type: integer        
+      responses:
+        '200':
+          description: Maintenance window succesfully extended
+          content:
+            application/json:
+              schema:
+                type: object
+                properties:
+                  response:
+                    type: string
+        '400':
+          $ref: '#/components/responses/BadRequest'
+        '404':
+          $ref: '#/components/responses/NotFound'
+        '415':
+          $ref: '#/components/responses/UnsupportedMediaType'
   '/maintenance/report':
     post:
       tags:
@@ -180,9 +220,43 @@ paths:
         '400':
            description: Invalid JSON.
 components:
+  responses:
+    NotFound:
+      description: The specified resource was not found
+      content:
+        application/json:
+          schema:
+            $ref: '#/components/schemas/ErrorMessage'
+    BadRequest:
+      description: Received data is invalid
+      content:
+        application/json:
+          schema:
+            $ref: '#/components/schemas/ErrorMessage'
+    UnsupportedMediaType:
+      description: The content-type is not supported
+      content:
+        application/json:
+          schema:
+            $ref: '#/components/schemas/ErrorMessage'
   schemas:
+    ErrorMessage:
+      additionalProperties: false
+      type: object
+      properties:
+        code:
+          type: integer
+        name:
+          type: string
+        description:
+          type: string
+      required:
+        - code
+        - name
+        - description
     MaintenanceWindow:
       type: object
+      additionalProperties: false
       properties:
         id:
           type: string
@@ -204,6 +278,7 @@ components:
               - $ref: '#/components/schemas/Link'
     Tag: # Can be referenced via '#/components/schemas/Tag'
       type: object
+      additionalProperties: false
       required:
         - tag_type
         - value
@@ -214,6 +289,7 @@ components:
           type: string
     Endpoint: # Can be referenced via '#/components/schemas/Endpoint'
       type: object
+      additionalProperties: false
       required:
         - interface_id
       properties:
@@ -224,6 +300,7 @@ components:
           $ref: '#/components/schemas/Tag'
     Link: # Can be referenced via '#/components/schemas/Link'
       type: object
+      additionalProperties: false
       required:
         - id
         - endpoint_a

From f2613fafcd85e45731b5c4644b138239b7cade65 Mon Sep 17 00:00:00 2001
From: Antonio Francisco <ajoaoff@gmail.com>
Date: Mon, 21 Jun 2021 19:44:45 -0300
Subject: [PATCH 2/3] Extend a maintenance

Extend a running maitenance for the given amount of
minutes. Fix #8.
---
 main.py                 |  28 +++++++
 openapi.yml             |   2 +-
 tests/unit/test_main.py | 170 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 199 insertions(+), 1 deletion(-)

diff --git a/main.py b/main.py
index 601439e..4bf0eb9 100644
--- a/main.py
+++ b/main.py
@@ -132,3 +132,31 @@ def end_mw(self, mw_id):
         maintenance.end_mw()
         return jsonify({'response': f'Maintenance window {mw_id} '
                                     f'finished.'}), 200
+
+    @rest('/<mw_id>/extend', methods=['PATCH'])
+    def extend_mw(self, mw_id):
+        """Extend a running maintenance window."""
+        data = request.get_json()
+        if not data:
+            raise UnsupportedMediaType('The request does not have a json')
+        try:
+            maintenance = self.maintenances[mw_id]
+        except KeyError:
+            raise NotFound(f'Maintenance with id {mw_id} not found')
+        if 'minutes' not in data:
+            raise BadRequest(f'Minutes of extension must be sent')
+        now = datetime.datetime.now(pytz.utc)
+        if now < maintenance.start:
+            raise BadRequest(f'Maintenance window {mw_id} has not yet '
+                             'started')
+        if now > maintenance.end:
+            raise BadRequest(f'Maintenance window {mw_id} has already '
+                             'finished')
+        try:
+            maintenance.end = maintenance.end + \
+                datetime.timedelta(minutes=data['minutes'])
+        except TypeError:
+            raise BadRequest(f'Minutes of extension must be integer')
+        self.scheduler.remove(maintenance)
+        self.scheduler.add(maintenance)
+        return jsonify({'response': f'Maintenance {mw_id} extended'}), 200
diff --git a/openapi.yml b/openapi.yml
index 7db802a..2e97e9f 100644
--- a/openapi.yml
+++ b/openapi.yml
@@ -1,7 +1,7 @@
 openapi: '3.0.0'
 info:
   title: kytos/maintenance_window
-  version: '0.1'
+  version: '0.2'
   description: >-
     **Warning**: *This documentation is experimental and may change soon.*
 
diff --git a/tests/unit/test_main.py b/tests/unit/test_main.py
index f94b32d..ef2e85e 100644
--- a/tests/unit/test_main.py
+++ b/tests/unit/test_main.py
@@ -605,3 +605,173 @@ def test_end_mw_case_4(self):
         self.assertEqual(response.status_code, 400)
         self.assertEqual(current_data['description'],
                          'Maintenance window 1234 has already finished.')
+
+    def test_extend_case_1(self):
+        """Test successful extension."""
+        start1 = datetime.now(pytz.utc) - timedelta(hours=3)
+        end1 = start1 + timedelta(hours=4)
+        start2 = datetime.now(pytz.utc) + timedelta(hours=5)
+        end2 = start2 + timedelta(hours=1, minutes=30)
+        self.napp.maintenances = {
+            '1234': MW(start1, end1, self.controller, items=[
+                '00:00:00:00:00:00:12:23'
+            ]),
+            '4567': MW(start2, end2, self.controller, items=[
+                '12:34:56:78:90:ab:cd:ef'
+            ])
+        }
+        url = f'{self.server_name_url}/1234/extend'
+        payload = {
+            'minutes': 45
+        }
+        response = self.api.patch(url, data=json.dumps(payload),
+                                  content_type='application/json')
+        self.assertEqual(response.status_code, 200)
+        maintenance = self.napp.maintenances['1234']
+        self.assertEqual(maintenance.end, end1 + timedelta(minutes=45))
+
+    def test_extend_case_2(self):
+        """Test no payload error."""
+        start1 = datetime.now(pytz.utc) - timedelta(hours=3)
+        end1 = start1 + timedelta(hours=4)
+        start2 = datetime.now(pytz.utc) + timedelta(hours=5)
+        end2 = start2 + timedelta(hours=1, minutes=30)
+        self.napp.maintenances = {
+            '1234': MW(start1, end1, self.controller, items=[
+                '00:00:00:00:00:00:12:23'
+            ]),
+            '4567': MW(start2, end2, self.controller, items=[
+                '12:34:56:78:90:ab:cd:ef'
+            ])
+        }
+        url = f'{self.server_name_url}/1234/extend'
+        response = self.api.patch(url)
+        self.assertEqual(response.status_code, 415)
+        current_data = json.loads(response.data)
+        self.assertEqual(current_data['description'],
+                         'The request does not have a json')
+
+    def test_extend_case_3(self):
+        """Test payload without minutes."""
+        start1 = datetime.now(pytz.utc) - timedelta(hours=3)
+        end1 = start1 + timedelta(hours=4)
+        start2 = datetime.now(pytz.utc) + timedelta(hours=5)
+        end2 = start2 + timedelta(hours=1, minutes=30)
+        self.napp.maintenances = {
+            '1234': MW(start1, end1, self.controller, items=[
+                '00:00:00:00:00:00:12:23'
+            ]),
+            '4567': MW(start2, end2, self.controller, items=[
+                '12:34:56:78:90:ab:cd:ef'
+            ])
+        }
+        url = f'{self.server_name_url}/1234/extend'
+        payload = {
+            'seconds': 240
+        }
+        response = self.api.patch(url, data=json.dumps(payload),
+                                  content_type='application/json')
+        self.assertEqual(response.status_code, 400)
+        current_data = json.loads(response.data)
+        self.assertEqual(current_data['description'],
+                         'Minutes of extension must be sent')
+
+    def test_extend_case_4(self):
+        """Test no integer extension minutes."""
+        start1 = datetime.now(pytz.utc) - timedelta(hours=3)
+        end1 = start1 + timedelta(hours=4)
+        start2 = datetime.now(pytz.utc) + timedelta(hours=5)
+        end2 = start2 + timedelta(hours=1, minutes=30)
+        self.napp.maintenances = {
+            '1234': MW(start1, end1, self.controller, items=[
+                '00:00:00:00:00:00:12:23'
+            ]),
+            '4567': MW(start2, end2, self.controller, items=[
+                '12:34:56:78:90:ab:cd:ef'
+            ])
+        }
+        url = f'{self.server_name_url}/1234/extend'
+        payload = {
+            'minutes': '240'
+        }
+        response = self.api.patch(url, data=json.dumps(payload),
+                                  content_type='application/json')
+        self.assertEqual(response.status_code, 400)
+        current_data = json.loads(response.data)
+        self.assertEqual(current_data['description'],
+                         'Minutes of extension must be integer')
+
+    def test_extend_case_5(self):
+        """Test maintenance did not start."""
+        start1 = datetime.now(pytz.utc) + timedelta(hours=3)
+        end1 = start1 + timedelta(hours=4)
+        start2 = datetime.now(pytz.utc) + timedelta(hours=5)
+        end2 = start2 + timedelta(hours=1, minutes=30)
+        self.napp.maintenances = {
+            '1234': MW(start1, end1, self.controller, items=[
+                '00:00:00:00:00:00:12:23'
+            ]),
+            '4567': MW(start2, end2, self.controller, items=[
+                '12:34:56:78:90:ab:cd:ef'
+            ])
+        }
+        url = f'{self.server_name_url}/1234/extend'
+        payload = {
+            'minutes': 240
+        }
+        response = self.api.patch(url, data=json.dumps(payload),
+                                  content_type='application/json')
+        self.assertEqual(response.status_code, 400)
+        current_data = json.loads(response.data)
+        self.assertEqual(current_data['description'],
+                         'Maintenance window 1234 has not yet started')
+
+    def test_extend_case_6(self):
+        """Test maintenance already finished."""
+        start1 = datetime.now(pytz.utc) - timedelta(hours=3)
+        end1 = start1 + timedelta(hours=2)
+        start2 = datetime.now(pytz.utc) + timedelta(hours=5)
+        end2 = start2 + timedelta(hours=1, minutes=30)
+        self.napp.maintenances = {
+            '1234': MW(start1, end1, self.controller, items=[
+                '00:00:00:00:00:00:12:23'
+            ]),
+            '4567': MW(start2, end2, self.controller, items=[
+                '12:34:56:78:90:ab:cd:ef'
+            ])
+        }
+        url = f'{self.server_name_url}/1234/extend'
+        payload = {
+            'minutes': 240
+        }
+        response = self.api.patch(url, data=json.dumps(payload),
+                                  content_type='application/json')
+        self.assertEqual(response.status_code, 400)
+        current_data = json.loads(response.data)
+        self.assertEqual(current_data['description'],
+                         'Maintenance window 1234 has already finished')
+
+    def test_extend_case_7(self):
+        """Test no maintenace found."""
+        start1 = datetime.now(pytz.utc) - timedelta(hours=3)
+        end1 = start1 + timedelta(hours=4)
+        start2 = datetime.now(pytz.utc) + timedelta(hours=5)
+        end2 = start2 + timedelta(hours=1, minutes=30)
+        self.napp.maintenances = {
+            '1234': MW(start1, end1, self.controller, items=[
+                '00:00:00:00:00:00:12:23'
+            ]),
+            '4567': MW(start2, end2, self.controller, items=[
+                '12:34:56:78:90:ab:cd:ef'
+            ])
+        }
+        url = f'{self.server_name_url}/1235/extend'
+        payload = {
+            'minutes': 240
+        }
+        response = self.api.patch(url, data=json.dumps(payload),
+                                  content_type='application/json')
+        self.assertEqual(response.status_code, 404)
+        current_data = json.loads(response.data)
+        self.assertEqual(current_data['description'],
+                         'Maintenance with id 1235 not found')

From ec00feefe723ba02186ec97264dcc418e5dcfb29 Mon Sep 17 00:00:00 2001
From: Antonio Francisco <ajoaoff@gmail.com>
Date: Tue, 22 Jun 2021 11:51:39 -0300
Subject: [PATCH 3/3] Fix version problems in dev requirements

---
 requirements/dev.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/requirements/dev.txt b/requirements/dev.txt
index 422b13f..842ce24 100644
--- a/requirements/dev.txt
+++ b/requirements/dev.txt
@@ -13,7 +13,7 @@ coverage==5.0.4
 docopt==0.6.2             # via yala
 first==2.0.1              # via pip-tools
 isort==4.3.4              # via pylint, yala
-lazy-object-proxy==1.3.1  # via astroid
+lazy-object-proxy==1.4.*  # via astroid
 mccabe==0.6.1             # via pylint
 pip-tools==2.0.2
 pluggy==0.12             # via tox
@@ -25,7 +25,7 @@ pytest==5.4.1             # via pytest
 six==1.15.0               # via astroid, pip-tools, pydocstyle, tox
 snowballstemmer==1.2.1    # via pydocstyle
 tox==3.2.1
-typed-ast==1.1.0          # via astroid
+typed-ast==1.4.0          # via astroid
 virtualenv==16.0.0        # via tox
 wrapt==1.10.11            # via astroid
 requests==2.21.0
