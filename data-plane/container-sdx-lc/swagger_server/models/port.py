# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class Port(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, node: str=None, type: str=None, status: str=None, state: str=None, services: str=None, nni: str=None, mtu: int=None):  # noqa: E501
        """Port - a model defined in Swagger

        :param id: The id of this Port.  # noqa: E501
        :type id: str
        :param name: The name of this Port.  # noqa: E501
        :type name: str
        :param node: The node of this Port.  # noqa: E501
        :type node: str
        :param type: The type of this Port.  # noqa: E501
        :type type: str
        :param status: The status of this Port.  # noqa: E501
        :type status: str
        :param state: The state of this Port.  # noqa: E501
        :type state: str
        :param services: The services of this Port.  # noqa: E501
        :type services: str
        :param nni: The nni of this Port.  # noqa: E501
        :type nni: str
        :param mtu: The mtu of this Port.  # noqa: E501
        :type mtu: int
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'node': str,
            'type': str,
            'status': str,
            'state': str,
            'services': str,
            'nni': str,
            'mtu': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'node': 'node',
            'type': 'type',
            'status': 'status',
            'state': 'state',
            'services': 'services',
            'nni': 'nni',
            'mtu': 'mtu'
        }
        self._id = id
        self._name = name
        self._node = node
        self._type = type
        self._status = status
        self._state = state
        self._services = services
        self._nni = nni
        self._mtu = mtu

    @classmethod
    def from_dict(cls, dikt) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The port of this Port.  # noqa: E501
        :rtype: Port
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Port.


        :return: The id of this Port.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Port.


        :param id: The id of this Port.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Port.


        :return: The name of this Port.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Port.


        :param name: The name of this Port.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def node(self) -> str:
        """Gets the node of this Port.


        :return: The node of this Port.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node: str):
        """Sets the node of this Port.


        :param node: The node of this Port.
        :type node: str
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    @property
    def type(self) -> str:
        """Gets the type of this Port.


        :return: The type of this Port.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Port.


        :param type: The type of this Port.
        :type type: str
        """
        allowed_values = ["1GE", "10GE", "25GE", "40GE", "50GE", "100GE", "400GE", "Other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self) -> str:
        """Gets the status of this Port.


        :return: The status of this Port.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Port.


        :param status: The status of this Port.
        :type status: str
        """
        allowed_values = ["up", "down", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def state(self) -> str:
        """Gets the state of this Port.


        :return: The state of this Port.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Port.


        :param state: The state of this Port.
        :type state: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def services(self) -> str:
        """Gets the services of this Port.


        :return: The services of this Port.
        :rtype: str
        """
        return self._services

    @services.setter
    def services(self, services: str):
        """Sets the services of this Port.


        :param services: The services of this Port.
        :type services: str
        """

        self._services = services

    @property
    def nni(self) -> str:
        """Gets the nni of this Port.


        :return: The nni of this Port.
        :rtype: str
        """
        return self._nni

    @nni.setter
    def nni(self, nni: str):
        """Sets the nni of this Port.


        :param nni: The nni of this Port.
        :type nni: str
        """

        self._nni = nni

    @property
    def mtu(self) -> int:
        """Gets the mtu of this Port.


        :return: The mtu of this Port.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu: int):
        """Sets the mtu of this Port.


        :param mtu: The mtu of this Port.
        :type mtu: int
        """

        self._mtu = mtu
