version: '3.9'

services:

  amlight:
    container_name: amlight
    image: amlight
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.2
    ports:
      - 6653:6653
      - 8081:8080
      - 8181:8181
    volumes:
      - ./tests:/tests
      - ./scripts:/scripts
      - ./etc/kytos:/etc/kytos
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_USERNAME: ${AMLIGHT_MONGO_USER}
      MONGO_PASSWORD: ${AMLIGHT_MONGO_PASS}
      MONGO_DBNAME: ${AMLIGHT_MONGO_DB}
      SDX_VERSION: ${SDX_VERSION}
      SDX_URL: ${AMLIGHT_SDX_URL}
      SDX_NAME: ${AMLIGHT_SDX_NAME}
      SDXLC_HOST: ${SDXLC_HOST}
      SDXLC_PORT: ${SDXLC_PORT}
      SDX_MQ_IP: ${SDX_MQ_IP}
      PUB_TOPIC: ${PUB_TOPIC}
      PUB_QUEUE: ${PUB_QUEUE}
      SUB_QUEUE: ${SUB_QUEUE}
      SUB_EXCHANGE: ${SUB_EXCHANGE}
      SUB_TOPIC: ${SUB_TOPIC}
      MQ_NAME: ${MQ_NAME}
      MQ_HOST: ${MQ_HOST}
      MQ_PORT: ${MQ_PORT}
      KYTOS_URL: ${KYTOS_URL}
    depends_on:
      - mongo-ready
      - rabbitmq3
    entrypoint: ["/scripts/amlight_sdx_lc_kytos.sh"]

  sax:
    container_name: sax
    image: sax
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.3
    ports:
      - 6654:6653
      - 8082:8080
      - 8282:8181
    volumes:
      - ./tests:/tests
      - ./scripts:/scripts
      - ./etc/kytos:/etc/kytos
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_USERNAME: ${SAX_MONGO_USER}
      MONGO_PASSWORD: ${SAX_MONGO_PASS}
      MONGO_DBNAME: ${SAX_MONGO_DB}
      SDX_VERSION: ${SDX_VERSION}
      SDX_URL: ${SAX_SDX_URL}
      SDX_NAME: ${SAX_SDX_NAME}
      SDXLC_HOST: ${SDXLC_HOST}
      SDXLC_PORT: ${SDXLC_PORT}
      SDX_MQ_IP: ${SDX_MQ_IP}
      PUB_TOPIC: ${PUB_TOPIC}
      PUB_QUEUE: ${PUB_QUEUE}
      SUB_QUEUE: ${SUB_QUEUE}
      SUB_EXCHANGE: ${SUB_EXCHANGE}
      SUB_TOPIC: ${SUB_TOPIC}
      MQ_NAME: ${MQ_NAME}
      MQ_HOST: ${MQ_HOST}
      MQ_PORT: ${MQ_PORT}
      KYTOS_URL: ${KYTOS_URL}
    depends_on:
      - mongo-ready
      - rabbitmq3
    entrypoint: ["/scripts/sax_sdx_lc_kytos.sh"]

  tenet:
    container_name: tenet
    image: tenet
    privileged: true
    restart: always
    tty: true
    networks:
      kytos_network:
        ipv4_address: 192.168.0.4
    ports:
      - 6655:6653
      - 8083:8080
      - 8383:8181
    volumes:
      - ./tests:/tests
      - ./scripts:/scripts
      - ./etc/kytos:/etc/kytos
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_USERNAME: ${TENET_MONGO_USER}
      MONGO_PASSWORD: ${TENET_MONGO_PASS}
      MONGO_DBNAME: ${TENET_MONGO_DB}
      SDX_VERSION: ${SDX_VERSION}
      SDX_URL: ${TENET_SDX_URL}
      SDX_NAME: ${TENET_SDX_NAME}
      SDXLC_HOST: ${SDXLC_HOST}
      SDXLC_PORT: ${SDXLC_PORT}
      SDX_MQ_IP: ${SDX_MQ_IP}
      PUB_TOPIC: ${PUB_TOPIC}
      PUB_QUEUE: ${PUB_QUEUE}
      SUB_QUEUE: ${SUB_QUEUE}
      SUB_EXCHANGE: ${SUB_EXCHANGE}
      SUB_TOPIC: ${SUB_TOPIC}
      MQ_NAME: ${MQ_NAME}
      MQ_HOST: ${MQ_HOST}
      MQ_PORT: ${MQ_PORT}
      KYTOS_URL: ${KYTOS_URL}
    depends_on:
      - mongo-ready
      - rabbitmq3
    entrypoint: ["/scripts/tenet_sdx_lc_kytos.sh"]

  mongo-setup:
    container_name: mongo-rs-init
    image: sdx_mongo
    restart: on-failure
    networks:
      kytos_network:
        ipv4_address: 192.168.0.5
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/rs-init.sh"]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_MONGO_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_USERNAME: ${ROOT_MONGO_USER}
      MONGO_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_DBNAME: ${ROOT_MONGO_DB}
    depends_on:
      - mongo1t
      - mongo2t
      - mongo3t

  mongo1t:
    container_name: mongo1t
    image: sdx_mongo
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.6
    ports:
      - 27027:27027
    volumes:
      - ./os_base/mongo_base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27027" ]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_MONGO_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_USERNAME: ${ROOT_MONGO_USER}
      MONGO_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_DBNAME: ${ROOT_MONGO_DB}

  mongo2t:
    container_name: mongo2t
    image: sdx_mongo
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.7
    ports:
      - 27028:27028
    volumes:
      - ./os_base/mongo_base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27028" ]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_MONGO_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_USERNAME: ${ROOT_MONGO_USER}
      MONGO_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_DBNAME: ${ROOT_MONGO_DB}

  mongo3t:
    container_name: mongo3t
    image: sdx_mongo
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.8
    ports:
      - 27029:27029
    volumes:
      - ./os_base/mongo_base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27029" ]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_MONGO_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_USERNAME: ${ROOT_MONGO_USER}
      MONGO_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_DBNAME: ${ROOT_MONGO_DB}

  mongo-ready:
    container_name: mongo-test-ready
    image: sdx_mongo
    restart: on-failure
    networks:
      kytos_network:
        ipv4_address: 192.168.0.10
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/rs-add.sh"]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_MONGO_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_USERNAME: ${ROOT_MONGO_USER}
      MONGO_PASSWORD: ${ROOT_MONGO_PASS}
      MONGO_DBNAME: ${ROOT_MONGO_DB}
    depends_on:
      - mongo-setup

  mininet:
    container_name: mininet
    image: mininet
    privileged: true
    tty: true
    networks:
      kytos_network:
        ipv4_address: 192.168.0.11
    volumes:
      - /lib/modules:/lib/modules
    depends_on:
      - amlight
      - sax
      - tenet

  rabbitmq3:
    container_name: "rabbitmq"
    image: sdx_rabbit
    networks:
      kytos_network:
        ipv4_address: 192.168.0.12
    ports:
      # AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

  worker:
    container_name: "worker"
    image: worker
    volumes:
      - ./container-sdx-controller/worker:/app
    networks:
      kytos_network:
        ipv4_address: 192.168.0.13
    depends_on:
      - rabbitmq3
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/worker.sh"]

networks:
  kytos_network:
    ipam:
      driver: default
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.1

volumes:
  persistent:
